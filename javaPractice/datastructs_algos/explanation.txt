I'm only going over the main data structures and algorithms used for now. more practical.

Actually, here's what I'll do as well. 
I've implemented some data structures and algorithms in college courses, and I don't remember the syntax for implementation. I could figure it out again. 
Since there are so many data structures and algorithms and they're actually not thattt hard to implement, I'd rather take notes on use-cases (and maybe notes on time complexity). 
I will only implement the most popular data structures and algorithms just to review syntax and create a personal example for them. 

Well, roadmap.sh/java summarizes the most commonly used (actually used) data structures:
"
Array allocates continuous memory for homogeneous data
Linked List stores data in nodes with references
Stack follows Last In First Out principle
Queue follows First In First Out principle
"
Hashmap as well/Maps
Sets
Lists
'Dictionary / Hash table' (front-end?)
'priority queue'
**** todo research: top 'functional programming' concepts (fold, reduce, recursion, mapping, laziness, currying, etc)


Queues:
I've seen queues implemented a bit at my current job. I've even implemented one and debugged another one :)
From what I've seen, they're useful for keeping track of a long list of asynchronous processes so, if an error occurs, it can be restarted from that failed point. For example, using it in api calls will help ensure successful api calls don't have to be redone if that information is already stored as the queue executes. 
Another way it could be useful is with a background process that schedules itself (maybe to bulk modify data) one queue at a time. 
More real-life use-cases:
********

Hashmap:


Array:


Stack: 


Linked List: 
'infinite scrolls in User Interfaces'




todo reseearch: 'UI code, batch job handling, parsers' dynamic programming
































